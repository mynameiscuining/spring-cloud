server:
  port: 7413
logging:
  level:
     root: info

auth: false

eureka:
  instance:
    hostname: gateway-zuul-1
    #hostname=${HOST_NAME}
    # 表示eureka client发送心跳给server端的频率
    #生产环境建议默认值
    #You can change the period by setting eureka.instance.leaseRenewalIntervalInSeconds.
    #Setting it to a value of less than 30 speeds up the process of getting clients connected to other services.
    #In production, it is probably better to stick with the default,
    #because of internal computations in the server that make assumptions about the lease renewal
    lease-renewal-interval-in-seconds: 5
    # 表示eureka server至上一次收到client的心跳之后，等待下一次心跳的超时时间，在这个时间内若没收到下一次心跳，则将移除该instance。
    # 默认为90秒
    # 如果该值太大，则很可能将流量转发过去的时候，该instance已经不存活了。
    # 如果该值设置太小了，则instance则很可能因为临时的网络抖动而被摘除掉。
    # 该值至少应该大于 leaseRenewalIntervalInSeconds
    lease-expiration-duration-in-seconds: 15
    #使用IP进行服务注册
    prefer-ip-address: true
    #注册列status显示的名字
    instance-id: ${spring.cloud.client.hostname}:${spring.application.name}:${spring.application.instance_id:${server.port}}
    #显示IP
    #instance-id:${spring.cloud.client.ipAddress}:${server.port}
  client:
    #此处基于starter-actuator
    healthcheck:
      enabled: true
    register-with-eureka: true
    serviceUrl:
      defaultZone: http://${spring.security.user.name}:${spring.security.user.password}@localhost:7402/eureka
      #高可用集群
      #defaultZone: http://${spring.security.user.name}:${spring.security.user.password}@localhost:7402/eureka,http://${spring.security.user.name}:${spring.security.user.password}@localhost:7406/eureka
spring:
  application:
    name: gateway-zuul-1
  security:
    user:
      name: cuining
      password: rootadmin




#Actuator监控管理,暴露所有端点,需要添加starter-actuator
management:
  endpoints:
    web:
      exposure:
        include: '*'
  endpoint:
    health:
      show-details: always
info:
  name: gateway-zuul-1
  port: ${server.port}
  hostname: ${eureka.instance.hostname}

#(0)
#默认行为/appname
#zuul:
  #只有全局行为和ignored-headers连用,作用同sensitive-headers相同
  #要加如依赖:spring-boot-starter-security
  #false:将会将头部信息传递
  #true:将会会忽略头部,不传递
  #ignore-security-headers: false
  #默认springsecurity会初始化头部:public static final List<String> SECURITY_HEADERS = Arrays.asList("Pragma", "Cache-Control", "X-Frame-Options", "X-Content-Type-Options", "X-XSS-Protection", "Expires");
  #ignored-headers: Pragma, Cache-Control, X-Frame-Options, X-Content-Type-Options, X-XSS-Protection, Expires
#   #全局
#   #默认值 private Set<String> sensitiveHeaders = new LinkedHashSet(Arrays.asList("Cookie", "Set-Cookie", "Authorization"));
#  sensitive-headers: Cookie,Set-Cookie,Authorization
#  #配置在这一层代表所有的,全局
#  #代理访问变为/api/appname
#  prefix: /api
#  #false /api/appname会剥离,
#  #true  /api/appname不会剥离掉.一同代理到微服务
#  strip-prefix: false
  #
#(1)
#zuul:
#  #所有的都不反向代理,只有配置zuul.routes.<appname>的做反向代理
#  #此处是忽略的appname,多个用逗号隔开
#  ignoredServices: '*'
#   #对于一些比较敏感的url不做代理,ant风格的匹配
#  ignoredPatterns: /**/admin/**
#  routes:
#  #provider 为application.name,此处用来代理时修改默认的application.name,取别名作为映射
#    provider: /provider-mapping-url/**

#(1.1)
#If you need your routes to have their order preserved, you need to
#use a YAML file, as the ordering is lost when using a properties file.
#这个地方的配置使用yml才有效,使用properties无效
#zuul:
#  routes:
#    #对于appname为user的映射为/myusers/**
#    #对于非user/映射为/**
#    users:
#      path: /myusers/**
#    legacy:
#      path: /**
#(2)
#细粒度的配置,指定属性
zuul:
  routes:
    #这个属性可以随便写,此处是user不起作用,因为存在serviceId,也可以是其他任意字符串,如果不存在serviceId,将认为user为appname
     users:
      #映射url,用作反向代理
      path: /provider-mapping-url/**
      #http的header信息一些敏感的信息不会代理出去
      #对于局部优先级较高
      #默认值 private Set<String> sensitiveHeaders = new LinkedHashSet(Arrays.asList("Cookie", "Set-Cookie", "Authorization"));
       #You can also set sensitive headers, by setting zuul.sensitiveHeaders.
       #If sensitiveHeaders is set on a route, it overrides the global sensitiveHeaders setting.
      sensitive-headers: Cookie,Set-Cookie,Authorization
      #显示设置为空,将所有的头部信息代理出去
      #sensitive-headers:
      #配置方式一: 此处是注册到eureka的appname
      serviceId: provider
      #代表局部
      #是剥离 /provider-mapping-url
      #strip-prefix: false
      #配置方式二:指定url,使用url请求不会进入断路器HystrixCommand,也不能使用ribbon进行负载均衡,此时就不需要指定testname
     #非eureka和eureka的情况都能使用
     # url: http://192.168.217.1:7414
#(3)
#集群负载使用eureka,配置如(2),负载集群的应用保证appname相同,默认负载策略:轮询,更改策略见ribbon项目

#(4)
#集群负载在非eureka的情况下
#zuul:
#  routes:
#    users:
#      path: /provider-mapping-url/**
#      #非eureka的情况下,取值自定义appname
#      serviceId: testname
##模拟非eureka,此时eureka就不能使用,需要注意
#ribbon:
#  eureka:
#    enabled: false
##非eureka的情况下,自定义appname
#testname:
#  ribbon:
#    listOfServers: http://192.168.217.1:7400,http://192.168.217.1:7403

#(6)本地转发
#zuul:
#  routes:
#    first:
#      path: /first/**
#      url: http://first.example.com
#    second:
#      path: /second/**
#      url: forward:/second
#    third:
#      path: /third/**
#      url: forward:/3rd
#    legacy:
#      path: /**
#      url: http://legacy.example.com

#(7)文件上传,对于小文件,可以直接通过代理上传
#对于大文件
#第一种方式:如下配置
#spring:
# servlet:
#    multipart:
#     #默认1Mb
#      max-file-size: 1Mb
#      #默认10Mb
#      max-request-size: 10Mb
#第二种方式通过/zuul/*绕过DispatcherServlet
#比如可以直接写成 http://localhost:7414/zuul/<appname>/url
#并且对于大文件把超时时间设置大些
#代理用hystrix封装
#hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds: 60000
#用ribbon做负载
#ribbon:
#  ConnectTimeout: 3000
#  ReadTimeout: 60000


