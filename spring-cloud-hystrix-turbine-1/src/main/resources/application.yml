server:
  port: 7411
logging:
  level:
     root: info

auth: false

eureka:
  instance:
    hostname: hystrix-turbine-1
    #hostname=${HOST_NAME}
    # 表示eureka client发送心跳给server端的频率
    #生产环境建议默认值
    #You can change the period by setting eureka.instance.leaseRenewalIntervalInSeconds.
    #Setting it to a value of less than 30 speeds up the process of getting clients connected to other services.
    #In production, it is probably better to stick with the default,
    #because of internal computations in the server that make assumptions about the lease renewal
    lease-renewal-interval-in-seconds: 5
    # 表示eureka server至上一次收到client的心跳之后，等待下一次心跳的超时时间，在这个时间内若没收到下一次心跳，则将移除该instance。
    # 默认为90秒
    # 如果该值太大，则很可能将流量转发过去的时候，该instance已经不存活了。
    # 如果该值设置太小了，则instance则很可能因为临时的网络抖动而被摘除掉。
    # 该值至少应该大于 leaseRenewalIntervalInSeconds
    lease-expiration-duration-in-seconds: 15
    #使用IP进行服务注册
    prefer-ip-address: true
    #注册列status显示的名字
    instance-id: ${spring.cloud.client.hostname}:${spring.application.name}:${spring.application.instance_id:${server.port}}
    #显示IP
    #instance-id:${spring.cloud.client.ipAddress}:${server.port}
  client:
    #此处基于starter-actuator
    healthcheck:
      enabled: true
    register-with-eureka: true
    serviceUrl:
      defaultZone: http://${spring.security.user.name}:${spring.security.user.password}@localhost:7402/eureka
      #高可用集群
      #defaultZone: http://${spring.security.user.name}:${spring.security.user.password}@localhost:7402/eureka,http://${spring.security.user.name}:${spring.security.user.password}@localhost:7406/eureka
spring:
  application:
    name: hystrix-turbine-1
  security:
    user:
      name: cuining
      password: rootadmin


#Actuator监控管理,暴露所有端点,需要添加starter-actuator
management:
  endpoints:
    web:
      exposure:
        include: '*'
  endpoint:
    health:
      show-details: always

info:
  name: hystrix-turbine-1
  port: ${server.port}
  hostname: ${eureka.instance.hostname}

#By default, Turbine looks for the /hystrix.stream endpoint on a registered instance by looking up
#its hostName and port entries in Eureka and then appending /hystrix.stream to it. If the
#instance’s metadata contains management.port, it is used instead of the port value for
#the /hystrix.stream endpoint. By default, the metadata entry called management.port is equal to the
# management.port configuration property. It can be overridden though with following configuration:
#意思为消费者端,并非turbine端配置:
#management:
#  server:
#    port:
#eureka:
#  instance:
#    metadata-map:
#      management.port: ${management.server.port:8081}



# 1. clusterNameExpression指定集群名称，默认表达式appName；此时：turbine.aggregator.clusterConfig需要配置想要监控的应用名称
# 2. 当clusterNameExpression:default时，turbine.aggregator.clusterConfig可以不写，因为默认就是default
# 3. 当clusterNameExpression:metadata['cluster']时，假设想要监控的应用配置了eureka.instance.metadata-map.cluster: ABC，则需要配置，同时turbine.aggregator.clusterConfig: ABC



#集群配置
#http://192.168.217.1:7411/turbine.stream?cluster=SPRING-CLOUD-CUSTOMER-RIBBON-HYSTRIX-1
#turbine:
#  aggregator:
#    cluster-config: CUSTOM-RIBBON-HYSTRIX
#    #集群监控application.name相同
#  app-config: custom-ribbon-hystrix
#   combine-host-port: true

#分布式监控多种微服务,第一种application.name逗号隔开
#http://192.168.217.1:7411/turbine.stream?cluster=SPRING-CLOUD-CUSTOMER-RIBBON-HYSTRIX-1
#turbine:
#  aggregator:
#    cluster-config: CUSTOM-RIBBON-HYSTRIX-1,CUSTOM-RIBBON-HYSTRIX-2
#  app-config: custom-ribbon-hystrix-1,custom-ribbon-hystrix-2
#  #可以让同一主机上的服务通过主机名与端口号的组合来进行区分，默认情况下会以host
#  #来区分不同的服务，这会使得在本机调试的时候，本机上的不同服务聚合成一个服务来统计。
#  combine-host-port: true

#分布式监控多种微服务,第二种
#默认为default所以不用加参数
#http://192.168.217.1:7411/turbine.stream
turbine:
  aggregator:
    cluster-config: default
  #application.name
  app-config: custom-ribbon-hystrix-1,custom-ribbon-hystrix-2
  #SPEL表达式
  cluster-name-expression: "'default'"
   #可以让同一主机上的服务通过主机名与端口号的组合来进行区分，默认情况下会以host
   #来区分不同的服务，这会使得在本机调试的时候，本机上的不同服务聚合成一个服务来统计。
  combine-host-port: true



