server:
  port: 7401
logging:
  level:
     root: info
provider:
    get:
        name: http://localhost:7400/get/name/
eureka:
  instance:
    hostname: custom-localhost-1
    # 表示eureka client间隔多久去拉取服务注册信息，默认为30秒，如果要迅速获取服务注册状态，可以缩小该值
    #生产环境建议默认值
    #You can change the period by setting eureka.instance.leaseRenewalIntervalInSeconds.
    #Setting it to a value of less than 30 speeds up the process of getting clients connected to other services.
    #In production, it is probably better to stick with the default,
    #because of internal computations in the server that make assumptions about the lease renewal
    lease-renewal-interval-in-seconds: 30
    # 表示eureka server至上一次收到client的心跳之后，等待下一次心跳的超时时间，在这个时间内若没收到下一次心跳，则将移除该instance。
    # 默认为90秒
    # 如果该值太大，则很可能将流量转发过去的时候，该instance已经不存活了。
    # 如果该值设置太小了，则instance则很可能因为临时的网络抖动而被摘除掉。
    # 该值至少应该大于 leaseRenewalIntervalInSeconds
    lease-expiration-duration-in-seconds: 90
    #使用IP进行服务注册
    prefer-ip-address: true
    instance-id: ${spring.cloud.client.hostname}:${spring.application.name}:${spring.application.instance_id:${server.port}}
    #注册列status显示的名字
  client:
    #此处基于starter-actuator
    healthcheck:
      enabled: true
    register-with-eureka: true
    serviceUrl:
      defaultZone: http://${spring.security.user.name}:${spring.security.user.password}@localhost:7402/eureka

spring:
  application:
    name: custom-1
  security:
    user:
      name: cuining
      password: rootadmin


#Actuator监控管理,暴露所有端点,需要添加starter-actuator
management:
  endpoints:
    web:
      exposure:
        include: '*'
info:
  name: custom-1
  port: ${server.port}
  hostname: ${eureka.instance.hostname}

